@page "/login"
@using System.ComponentModel.DataAnnotations
@using Data
@using System.Security.Claims
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<EditForm Model="myModel" OnValidSubmit="Success">
    <DataAnnotationsValidator/>
    <div class="mat-layout-grid pt-5">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                <img src="/logo.png"/>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                <h2>Login</h2>
                <p>
                    <MatTextField Label="Username" @bind-Value="myModel.Username"/>
                    <ValidationMessage For="@(() => myModel.Username)"/>
                </p>
                <p>
                    <MatTextField Label="Password" @bind-Value="myModel.Password" Type="password"/>
                    <ValidationMessage For="@(() => myModel.Password)"/>
                </p>
                <MatButton Type="submit" Raised="true">Login</MatButton>
            </div>
        </div>
    </div>
</EditForm>


@code {
    ClaimsPrincipal claimsPrincipal;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    protected async override Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticationStateTask).User;

        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }

    }
    async Task Success(){
        var userFromService = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(myModel.Username, myModel.Password);
        if(userFromService == false){
            await JS.InvokeAsync<object>("alert", "Unsuccessful login!");
        }
        else{
            await JS.InvokeAsync<object>("alert", "Successful login!");
            NavigationManager.NavigateTo("/");
        }
    }
    LoginModel myModel = new LoginModel();

    public class LoginModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        //[MinLength(8)]
        public string Password { get; set; }
    }
}